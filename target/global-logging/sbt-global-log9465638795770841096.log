[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\miste\AppData\Local\Temp\idea5.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\miste\AppData\Local\Temp\idea5.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.6.2 (AdoptOpenJDK Java 11.0.8)
[debug]       Load.loadUnit: plugins took 68.4231ms
[debug]       Load.loadUnit: defsScala took 0.2318ms
[debug] [Loading] Scanning directory C:\Users\miste\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\miste\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 11.2739 ms
[debug]           Load.resolveProject(global-plugins) took 34.0289ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\miste\.sbt\1.0\plugins, plugins: List(<none>))) took 66.1023ms
[debug] [Loading] Done in C:\Users\miste\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 81.871ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.1647ms
[debug]     Load.loadUnit(file:/C:/Users/miste/.sbt/1.0/plugins/, ...) took 157.3862ms
[debug]   Load.apply: load took 288.3944ms
[debug]   Load.apply: resolveProjects took 4.8738ms
[debug]   Load.apply: finalTransforms took 52.0951ms
[debug]   Load.apply: config.delegates took 7.5359ms
[debug]   Load.apply: Def.make(settings)... took 421.1545ms
[debug]   Load.apply: structureIndex took 93.2982ms
[debug]   Load.apply: mkStreams took 1.4347ms
[info] loading global plugins from C:\Users\miste\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 2216.3255ms
[debug]           Load.loadUnit: plugins took 22.5855ms
[debug]           Load.loadUnit: defsScala took 0.003ms
[debug] [Loading] Scanning directory D:\COURS-EFREI M1\Functional programming with Scala\ScalaProject\project
[debug]             Load.loadUnit: mkEval took 5.8603ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in D:\COURS-EFREI M1\Functional programming with Scala\ScalaProject\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 1.7317 ms
[info] loading settings for project scalaproject-build from idea5.sbt ...
[debug]               Load.resolveProject(scalaproject-build) took 2.2855ms
[debug]             Load.loadTransitive: finalizeProject(Project(id scalaproject-build, base: D:\COURS-EFREI M1\Functional programming with Scala\ScalaProject\project, plugins: List(<none>))) took 4.5226ms
[debug] [Loading] Done in D:\COURS-EFREI M1\Functional programming with Scala\ScalaProject\project, returning: (scalaproject-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 99.9221ms
[debug]           Load.loadUnit: cleanEvalClasses took 2.7976ms
[debug]         Load.loadUnit(file:/D:/COURS-EFREI%20M1/Functional%20programming%20with%20Scala/ScalaProject/project/, ...) took 126.11ms
[debug]       Load.apply: load took 127.1804ms
[debug]       Load.apply: resolveProjects took 0.0889ms
[debug]       Load.apply: finalTransforms took 8.8616ms
[debug]       Load.apply: config.delegates took 0.3697ms
[debug]       Load.apply: Def.make(settings)... took 76.7953ms
[debug]       Load.apply: structureIndex took 29.7422ms
[debug]       Load.apply: mkStreams took 0.0025ms
[info] loading project definition from D:\COURS-EFREI M1\Functional programming with Scala\ScalaProject\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug]     Load.loadUnit: plugins took 503.463ms
[debug]     Load.loadUnit: defsScala took 0.0028ms
[debug] [Loading] Scanning directory D:\COURS-EFREI M1\Functional programming with Scala\ScalaProject
[debug]       Load.loadUnit: mkEval took 0.2905ms
[debug] [Loading] Found root project root w/ remaining 
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 2.8625 ms
[info] loading settings for project root from build.sbt ...
[debug]         Load.resolveProject(root) took 24.9591ms
[debug]       Load.loadTransitive: finalizeProject(Project(id root, base: D:\COURS-EFREI M1\Functional programming with Scala\ScalaProject, plugins: List(<none>))) took 29.3438ms
[debug] [Loading] Done in D:\COURS-EFREI M1\Functional programming with Scala\ScalaProject, returning: (root)
[debug]     Load.loadUnit: loadedProjectsRaw took 109.7618ms
[debug]     Load.loadUnit: cleanEvalClasses took 3.5646ms
[debug]   Load.loadUnit(file:/D:/COURS-EFREI%20M1/Functional%20programming%20with%20Scala/ScalaProject/, ...) took 617.4287ms
[debug] Load.apply: load took 619.458ms
[debug] Load.apply: resolveProjects took 0.1507ms
[debug] Load.apply: finalTransforms took 21.3126ms
[debug] Load.apply: config.delegates took 0.3494ms
[debug] Load.apply: Def.make(settings)... took 61.8957ms
[debug] Load.apply: structureIndex took 19.0568ms
[debug] Load.apply: mkStreams took 0.0019ms
[info] set current project to ScalaProject (in build file:/D:/COURS-EFREI%20M1/Functional%20programming%20with%20Scala/ScalaProject/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 60065 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 60065, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to ScalaProject (in build file:/D:/COURS-EFREI%20M1/Functional%20programming%20with%20Scala/ScalaProject/)
[debug] > Exec(idea-shell, None, None)
